import sqlite3
import os
import sys
import psutil
import platform
import wmi
from uuid import uuid4

defaultDir = os.path.join(os.getenv('UserProfile'), 'AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\')

class StickyNotes:
  def __init__(self, dir=defaultDir):
    if os.name != 'nt':
      raise OSError("Operating system is not supported")

    os.system('explorer.exe shell:appsFolder\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe!App')

    if not os.path.isdir(defaultDir):
      raise IOError("Microsoft Sticky Notes not found")

    self.directory = dir
    self.connectToDB()
    self.Theme = self.__Theme()

  class __Theme:
    def __init__(self):
      self.themes = [
        "Yellow",
        "White",
        "Green",
        "Pink",
        "Purple",
        "Blue",
        "Gray",
        "Charcoal",
      ] 
      self.yellow = 'Yellow'
      self.white = 'White'
      self.green = 'Green'
      self.pink = 'Pink'
      self.purple = 'Purple'
      self.blue = 'Blue'
      self.gray = 'Gray'
      self.charcoal = 'Charcoal'

  def getDir(self):
    return self.directory

  def connectToDB(self):
    if os.path.isfile(os.path.join(self.directory, 'plum.sqlite')):
      self.__db = sqlite3.connect(os.path.join(self.directory, 'plum.sqlite'))
      self.__cursor = self.__db.cursor()
    else:
      raise FileNotFoundError('Database file not found')

  def closeDB(self):
    self.__db.close()

  def getNotes(self, id):
    self.__cursor.execute('SELECT * FROM Note WHERE Id = ?', [id])
    return list(map(lambda x: Note(x[0], x[5], bool(x[2])), self.__cursor.fetchall()))
    # for selectedNote in self.__cursor.fetchall():
    #   return Note(selectedNote[0], selectedNote[5], bool(selectedNote[2]))
      

  def writeNote(self, note):
    if type(note) == Note:
      if (note.theme in self.Theme.themes and
        type(note.text) == str):
          self.__cursor.execute(
            'INSERT INTO Note(Text, Theme, IsOpen, Id) values (?, ?, ?, ?)',
            [note.text, note.theme, note.getIsOpen(), note.id])
      else:
        raise TypeError('Incorrect type within Note')
    else:
      raise TypeError('Note expected')

  def writeNotes(self, *notes):
    for note in notes:
      self.writeNote(note)

  def reloadNotes(self):
    for p in psutil.process_iter():
      if "Microsoft.Notes.exe" in p.name():
        p.kill()
        # ??? interesting command, took me a while to find
        os.system('explorer.exe shell:appsFolder\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe!App')

  def commit(self):
    self.__db.commit()

  # Note this will not work with sticky notes not generated by the program
  # def matchExactText(self, text):
  #   self.__cursor.execute('SELECT * FROM Note WHERE Text = ?', [text])
  #   self.__cursor.fetchall()

class Note():
  def __init__(self, text, theme=None, isOpen=False):
    self.text = text
    self.setIsOpen(isOpen)
    self.setTheme(theme)
    self.id = str(uuid4())

  def setTheme(self, theme):
    if theme == None:
      self.theme = 'White'
    else:
      self.theme = theme

  # Probably a better way of doing this
  def setIsOpen(self, isOpen):
    isOpenBool = bool(isOpen)
    if (isOpenBool == False):
      self.__isOpen = 0
    if (isOpenBool == True):
      self.__isOpen = 1

  def getIsOpen(self): return bool(self.__isOpen)

  # def findMonitors(self):
  #   self.__monitors = []
  #   obj = wmi.WMI().Win32_PnPEntity(ConfigManagerErrorCode=0)
  #   displays = [x for x in obj if 'DISPLAY' in str(x)]
  #   for monitor in displays:
  #     if 'UID' in monitor.DeviceID:
  #       print(monitor)
  #       self.__monitors.append(monitor.DeviceID)

  # def writeNote(self): 
    # self.__cursor.execute('''INSERT INTO Note())

  # def setPos(self):

  
# db = sqlite3.connect(stickyNoteDBPath)
# cursor = db.cursor()
# cursor.execute('SELECT * FROM Note')
# print(cursor.fetchone())
